<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>《图解HTTP》读书笔记</title>
      <link href="2021/04/27/tu-jie-http-du-shu-bi-ji/"/>
      <url>2021/04/27/tu-jie-http-du-shu-bi-ji/</url>
      
        <content type="html"><![CDATA[<p><img src="https://i.loli.net/2021/04/27/15yqLTmpaPGkCvs.jpg" alt="图解HTTP"></p><p>电子书附件下载：<a href="/download/%E5%9B%BE%E8%A7%A3HTTP.pdf">《图解HTTP》</a></p><hr><blockquote><p>这本书，在19年实习期间看过，当时刚接触计网看的比较粗。后来整理了下，</p><p>准备在看一遍。在个人博客进行整理。</p></blockquote><blockquote><ul><li><p>本书前半部分详细介绍了<code>HTTP1.1</code>通信过程,包括<code>HTTP方法</code>,<code>协议格式</code>,<code>报文结构</code>,<code>首部字段</code>,<code>状态码</code>等的具体含义，还分别讲解了HTTP通信过程中<code>代理</code>,<code>网关</code>,<code>隧道</code>等的作用。</p></li><li><p>之后在本书以的地7、8章重点阐述了<code>WEB安全上</code>,涵盖了<code>HTTPS、SSL、证书认证、加密机制、WEB攻击手段</code>等。</p></li><li><p>最后作者介绍了HTTP协议目前的发展以及相关应用。</p></li></ul></blockquote><p><strong>在计网面试题中，与HTTP相关的有几个题目：</strong></p><ul><li><code>浏览器输入一个URL,发生了什么</code></li><li><code>HTTP无状态协议，那么它是怎么保存状态的</code></li><li><code>HTTP的安全：HTTPS协议的实现</code></li><li><code>一些首部：例如与缓存有关、与会话有关、与跳转有关、与实部字段有关</code></li><li><code>HTTP的最新发展，包括HTTP1.1、HTTP2.0 HTTP3.0</code></li></ul><p>当然可以背诵记忆应付面试，笔者觉得还是要弄清楚来龙去脉，以及为什么这些是面试的重点（当然是很重要，为什么重要？）</p><p>@[toc]</p><h2 id="1、简单的HTTP协议"><a href="#1、简单的HTTP协议" class="headerlink" title="1、简单的HTTP协议"></a>1、简单的HTTP协议</h2><blockquote><ol><li>HTTP协议和TCP/IP协议族内其他众多协议相同，用于客户端和服务器之间的通信</li><li>请求访问文本或图像资源的一端称为客户端，而提供资源响应的一段称为服务器端</li><li>HTTP协议规定，请求从客户端发出，最后服务器端响应改请求并返回。</li></ol></blockquote><p><img src="https://i.loli.net/2021/04/27/zdWkrBPp5ADQJIt.png" alt="HTTP协议客户端与服务端交互模式"></p><blockquote><ol start="4"><li>HTTP是一种不保存状态，即<code>无状态(stateless)协议</code>，HTTP协议自身不对请求和响应之间的通信状态进行保存。也就是说在HTTP这个级别，协议对于发送过的请求或响应都不做持久化处理。(<code>Cookie,Session,Token</code>可以解决这个问题)</li></ol></blockquote><blockquote><p>5 . HTTP协议的初始版本中，每进行一次HTTP通信就要断开一次TCP连接</p><p><img src="https://i.loli.net/2021/04/27/TP6iRK3AHsSmwGL.png" alt="HTTP协议早期版本，短链接模式"></p><ul><li>在HTTP1.1中提出<code>持久化连接</code>(<strong>HTTP Persistent Connetions,也称为HTTP Keep-alive或HTTP connection reuse</strong>),持久连接的特点是，只要任意一端没有明确提出断开连接，则保持TCP连接状态（<code>可以在字段中进行控制</code>)</li><li>持久化连接的好处在于减少TCP连接的重复建立和断开所造成的额外开销，减轻了服务器端的负载。</li></ul><p><img src="https://i.loli.net/2021/04/27/hQRXFvzsP3rSuAV.png" alt="HTTP1.1协议后的持久化连接"></p></blockquote><blockquote><ol start="6"><li><p>HTTP协议是无状态的协议</p><ul><li>为了解决无状态的问题，引入Cookie技术，Cookie技术通过在请求和响应报文中写入<code>Cookie</code>信息来控制客户端的状态</li><li>Cookie会根据从服务器端发送的响应报文内一个叫做<code>Set-Cookie</code>的首部字段信息，通知客户端保存<code>Cookie</code>。当下次客户端再往服务器发送请求时，客户端会自动再请求报文中加入Cookie值后发送出去。</li></ul><p><img src="https://i.loli.net/2021/04/27/gkAtl9OWpVKauN4.png" alt="Cookie机制"></p></li></ol></blockquote><h3 id="1-1、HTTP报文格式"><a href="#1-1、HTTP报文格式" class="headerlink" title="1.1、HTTP报文格式"></a>1.1、HTTP报文格式</h3><ul><li>用于HTTP协议交互的信息被称为HTTP报文。请求端（客户端）的HTTP报文叫做请求报文，响应端（服务器端）的叫做响应报文。HTTP报文本身由多行（用<code>CR+LF</code>作换行符）数据构成的字符串文本</li><li>HTTP报文大致可分为<code>报文首部</code>和<code>报文主题</code>两块。两者由最初出现的<code>空行（CR+LF)</code>来划分。</li></ul><p><img src="https://i.loli.net/2021/04/27/37BlTXvqUgkiAKa.png" alt="HTTP报文格式"></p><ul><li><p>请求报文与响应报文格式如下：</p><p><img src="https://i.loli.net/2021/04/27/TkfzCAZiIBKtv2o.png" alt="请求报文与响应报文的格式"></p><ol><li>​    <code>请求行</code>:nail_care: 包含用于请求的方法，请求URI和HTTP版本</li><li>​    <code>状态行</code>: 包含表明响应结果的状态码，原因短语和HTTP版本</li><li>​     <code>首部字段</code>: 包含表示请求和响应的各种条件和属性的各类首部<br>​    ​    -  一般有4种首部，分别是：<code>通用首部</code>,<code>请求首部</code>、<code>响应首部</code>和<code>实体首部</code></li></ol></li></ul><h3 id="1-2、HTTP实体传输时的一些技术手段"><a href="#1-2、HTTP实体传输时的一些技术手段" class="headerlink" title="1.2、HTTP实体传输时的一些技术手段"></a>1.2、HTTP实体传输时的一些技术手段</h3><blockquote><ul><li><code>压缩传输的内容编码</code>:向待发送邮件内增加附件时，为了使得邮件容量变小，我们会先用<code>ZIP</code>压缩文件之后再添加附件操作，HTTP协议种有一种被称为内容编码的功能也进行类似的操作</li><li><code>分块传输编码</code>: 在HTTP通信过程种 :cake:,请求的编码实体资源尚未全部传输完成之前，在浏览器无法显示请求页面，在传输大容量数据时，通过把数据分割成多块，能够让浏览器逐步显示页面。</li></ul></blockquote><h3 id="1-3、发送多种数的多部分对象集合-内容协商"><a href="#1-3、发送多种数的多部分对象集合-内容协商" class="headerlink" title="1.3、发送多种数的多部分对象集合/内容协商"></a>1.3、发送多种数的多部分对象集合/内容协商</h3><p>1、<strong>HTTP报文发送的一份报文主体内可含有多类型实体，通常时在图片或文本文件等上传时使用</strong></p><ul><li><code>multipart/form-data </code>:在 Web 表单文件上传时使用  </li><li><code>multipart/byteranges </code>:状态码 206（Partial Content， 部分内容） 响应报文包含了多个范<br>围的内容时使用。  </li></ul><p>2、<strong>同一个 Web 网站有可能存在着多份相同内容的页面。 比如英语版和中文版的 Web 页面， 它们内容上虽相同， 但使用的语言却不同；因此需要客户端与服务端进行内容的协商;内容协商机制是指客户端和服务器端就响应的资源内容进行交涉， 然后提供给客户端最为适合的资源。 内容协商会以响应资源的语言、 字<br>符集、 编码方式等作为判断的基准</strong></p><h2 id="2、HTTP首部字段"><a href="#2、HTTP首部字段" class="headerlink" title="2、HTTP首部字段"></a>2、HTTP首部字段</h2><ul><li>HTTP 协议的请求和响应报文中必定包含 HTTP 首部。 首部内容为客户端和服务器分别处理请求和响应提供所需要的信息。  </li><li>HTTP 首部字段是构成 HTTP 报文的要素之一。 在客户端与服务器之间以 HTTP 协议进行通信的过程中， 无论是请求还是响应都会使用首部字段， 它能起到传递额外重要信息的作用。 </li><li>HTTP首部字段根据实际用途被分为以下4种类型<ul><li><code>通用首部字段</code>：请求报文和响应报文两方都会使用首部</li><li><code>请求首部字段</code>： 从客户端向服务器端发送请求报文时使用的首部。 补充了请求的附加<br>内容、 客户端信息、 响应内容相关优先级等信息。  </li><li><code>响应首部字段</code>:  从服务器端向客户端返回响应报文时使用的首部。 补充了响应的附加<br>内容， 也会要求客户端附加额外的内容信息  </li><li><code>实体首部字段</code>: 针对请求报文和响应报文的实体部分使用的首部。 补充了资源内容更<br>新时间等与实体有关的信息。  </li></ul></li></ul><p>对于这些首部字段，我们需要明确：这些首部字段对信息具有控制作用，用于客户端与服务器端信息交换的一些协商机制，在这里，笔者直接进行截取书上总结的一些字段，若需要，后期可以查阅文档:</p><p><img src="https://i.loli.net/2021/04/27/bxm3oGiHIMOyLrU.png" alt="通用首部字段"></p><p><img src="https://i.loli.net/2021/04/27/GBDOF4Wyilb1cIT.png" alt="请求首部字段"></p><p><img src="https://i.loli.net/2021/04/27/CpyvwOx9Xg1VJU2.png" alt="响应首部字段"></p><p><img src="https://i.loli.net/2021/04/27/aviShKLWmAZHEwN.png" alt="实体首部字段"></p><hr><hr><h3 id="为Cookie服务的首部字段"><a href="#为Cookie服务的首部字段" class="headerlink" title="为Cookie服务的首部字段"></a>为Cookie服务的首部字段</h3><p><strong>Cookie 的工作机制是用户识别及状态管理。 Web 网站为了管理用户的状态会通过 Web 浏览器， 把一些数据临时写入用户的计算机内。 接着当用户访问该Web网站时， 可通过通信方式取回之前发放的Cookie</strong></p><p>   <img src="https://i.loli.net/2021/04/27/PRxOLwibudfYTEZ.png" alt="为Cookie服务的首部字段"></p><h2 id="3、HTTP响应报文"><a href="#3、HTTP响应报文" class="headerlink" title="3、HTTP响应报文"></a>3、HTTP响应报文</h2><h3 id="3-1、状态码"><a href="#3-1、状态码" class="headerlink" title="3.1、状态码"></a>3.1、状态码</h3><p><img src="https://i.loli.net/2021/04/27/TkfzCAZiIBKtv2o.png" alt="请求报文与响应报文的格式"></p><p><code>状态行</code>: 包含表明响应结果的状态码，原因短语和HTTP版本</p><blockquote><p>状态码的职责是当客户端向服务端发送请求时，描述返回的请求结果。借助状态码，用户可以知道服务器端时正确处理了请求，还是出现了错误。</p></blockquote><p><code>状态码的类别大致分为5类，如表格所示：</code></p><table><thead><tr><th></th><th>类别</th><th>原因短语</th></tr></thead><tbody><tr><td>1XX</td><td>Informational（信息性状态码）</td><td>接收的请求正在处理</td></tr><tr><td>2XX</td><td>Success（成功状态码）</td><td>请求正常处理完毕</td></tr><tr><td>3XX</td><td>Redirection（重定向状态码）</td><td>需要进行附加操作以完成请求</td></tr><tr><td>4XX</td><td>Client Error（客户端错误状态码）</td><td>服务器无法处理请求</td></tr><tr><td>5XX</td><td>Server Error（服务器错误状态码）</td><td>服务器处理请求出错</td></tr></tbody></table><p><code>具体的一些常用的状态码如下：</code></p><table><thead><tr><th>200 OK</th><th>表示从客户端发来的请求在服务器端被正常处理了</th></tr></thead><tbody><tr><td>204 No Content</td><td>该状态码代表服务器接收的请求已成功处理， 但在返回的响应报文中<br/>不含实体的主体部分。</td></tr><tr><td>206 Partial Content</td><td>该状态码表示客户端进行了范围请求， 而服务器成功执行了这部分的<br/><code>GET</code> 请求。 响应报文中包含由<code> Content-Range</code> 指定范围的实体内容。</td></tr><tr><td>301 Moved Permanently</td><td>永久性重定向。 该状态码表示请求的资源已被分配了新的 URI， 以后<br/>应使用资源现在所指的 URI。 也就是说， 如果已经把资源对应的 URI<br/>保存为书签了， 这时应该按 Location 首部字段提示的 URI 重新保存。</td></tr><tr><td>302 Found</td><td>临时性重定向。 该状态码表示请求的资源已被分配了新的 URI， 希望<br/>用户（本次） 能使用新的 URI 访问。</td></tr><tr><td>303 See Other</td><td>该状态码表示由于请求对应的资源存在着另一个 URI， 应使用 GET<br/>方法定向获取请求的资源。</td></tr><tr><td>304 Not Modified</td><td></td></tr><tr><td>400 Bad Request</td><td>该状态码表示请求报文中存在语法错误。 当错误发生时， 需修改请求<br/>的内容后再次发送请求。 另外， 浏览器会像 200 OK 一样对待该状态<br/>码。</td></tr><tr><td>401 Unauthorized</td><td>该状态码表示发送的请求需要有通过 HTTP 认证（BASIC 认证、<br/>DIGEST 认证） 的认证信息。 另外若之前已进行过 1 次请求， 则表示<br/>用 户认证失败</td></tr><tr><td>404 Not Found</td><td>该状态码表明服务器上无法找到请求的资源。 除此之外， 也可以在服<br/>务器端拒绝请求且不想说明理由时使用。</td></tr><tr><td>500 Internal Server Error</td><td>该状态码表明服务器端在执行请求时发生了错误。 也有可能是 Web<br/>应用存在的 bug 或某些临时的故障</td></tr><tr><td>503 Service Unavailable</td><td>该状态码表明服务器暂时处于超负载或正在进行停机维护， 现在无法<br/>处理请求。 如果事先得知解除以上状况需要的时间， 最好写入<br/>RetryAfter 首部字段再返回给客户端。</td></tr></tbody></table><h2 id="4、HTTP安全机制"><a href="#4、HTTP安全机制" class="headerlink" title="4、HTTP安全机制"></a>4、HTTP安全机制</h2><h3 id="4-1、HTTP的缺点（通信安全）"><a href="#4-1、HTTP的缺点（通信安全）" class="headerlink" title="4.1、HTTP的缺点（通信安全）"></a>4.1、HTTP的缺点（通信安全）</h3><p>HTTP 主要有这些不足， 例举如下。</p><ul><li><code>通信使用明文（ 不加密） ， 内容可能会被窃听</code></li><li><code>不验证通信方的身份， 因此有可能遭遇伪装</code></li><li><code>无法证明报文的完整性， 所以有可能已遭篡改  </code></li></ul>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习路线</title>
      <link href="2021/04/26/xue-xi-lu-xian/"/>
      <url>2021/04/26/xue-xi-lu-xian/</url>
      
        <content type="html"><![CDATA[<p><img src="https://i.loli.net/2021/04/26/qD5CJgPzWv24pny.jpg" alt="1"></p><blockquote><p>在本文中，根据<a href="https://www.codesheep.cn/">程序羊</a>总结以及网上的一些介绍，总结下后端知识体系，方便学习以及<code>查缺补漏</code>。</p></blockquote><p>整个知识体系如下面的<a href="https://www.processon.com/mindmap/607ec61ef346fb647a63196d">思维导图</a>所示:</p><p><img src="https://i.loli.net/2021/04/26/YqOmwfjxPEgMNRh.png" alt="学习路线 _1_.png"></p><p>可以从下面几点出发：</p><hr><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a><code>基础知识</code></h2><ul><li><code>计算机网络</code></li><li><code>数据结构与算法</code><ul><li>数组/字符串/链表/队列/栈/堆/二叉树/哈希表</li><li>排序/查找/贪心/递归/动态规划</li><li><code>LeetCode要整理300道出来</code></li></ul></li><li><code>操作系统</code></li></ul><h2 id="Java语言"><a href="#Java语言" class="headerlink" title="Java语言"></a><code>Java语言</code></h2><ul><li>Java语法</li><li>JVM知识与调优</li><li>如何编写Java高效</li><li>JDK源码:<code>容器</code> <code>IO</code> </li></ul><h2 id="Spring系列"><a href="#Spring系列" class="headerlink" title="Spring系列"></a><code>Spring系列</code></h2><ul><li>Spring</li><li>Spring MVC</li><li>Spring Boot</li><li>Spring Cloud</li></ul><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a><code>数据库</code></h2><ul><li>MYSQL的语法</li><li>事务、隔离级别以及底层实现</li><li>索引、底层的数据结构</li><li>锁以及底层实现</li><li>ORM层框架<ul><li><code>MYBATIS</code></li><li><code>JPA</code></li></ul></li><li>连接池<ul><li>Druid</li><li>C3P0</li></ul></li><li>分库分表<ul><li>MYCAT</li><li>Sharding-JDBC</li></ul></li></ul><hr><h2 id="中间件技术"><a href="#中间件技术" class="headerlink" title="中间件技术"></a><code>中间件技术</code></h2><ul><li>缓存Cache</li><li>Redis：<code>源码的研究</code><ul><li>本地缓存：GuavaCache <code>源码的研究</code></li></ul></li><li>分布式缓存<ul><li>缓存使用的一些原则</li></ul></li><li>消息队列<ul><li>RocketMQ</li><li>KafKa</li></ul></li><li>RPC框架<ul><li>Dubbo: 源码</li><li>手写</li><li>与Netty相关的技术</li></ul></li><li>搜索引擎技术<ul><li>ElasticSearch</li></ul></li></ul><hr><h2 id="分布式与微服务"><a href="#分布式与微服务" class="headerlink" title="分布式与微服务"></a><code>分布式与微服务</code></h2><ul><li><p>服务注册与发现</p><ul><li>Eureka</li><li>Zookeeper</li><li>Nacos</li></ul></li><li><p>网关</p><ul><li>Zuul</li><li>GateWay</li></ul></li><li><p>服务调用/负载均衡</p><ul><li>Ribbon</li><li>Feign</li></ul></li><li><p>熔断/降级</p><ul><li>Hystrix</li><li>Sentinel</li></ul></li><li><p>配置中心‘</p><ul><li>Config</li><li>Apollo</li><li>Nacos</li></ul></li><li><p>权限设置</p><ul><li>SpringSecurity</li><li>OAuth2</li><li>SSO</li></ul></li><li><p>分布式事务</p><ul><li><p>JAT接口</p></li><li><p>2PC</p></li></ul></li><li><p>任务调度 Quartz</p></li><li><p>链路追踪和监控 Zipkin</p></li><li><p>日志分析与监控 ELK</p></li></ul><hr><hr><h2 id="开发知识与工具"><a href="#开发知识与工具" class="headerlink" title="开发知识与工具"></a>开发知识与工具</h2><ul><li>集成开发环境IDEA<ul><li>快捷键</li><li>插件plugin</li><li>DeBug</li><li>偏好配置</li></ul></li><li>Linux系统<ul><li>常用命令</li><li>Shell脚本</li><li>基础知识</li></ul></li><li>项目管理/构建工具<ul><li>Maven</li><li>Gradle</li></ul></li><li>代码管理工具<ul><li>SVN</li><li>GIT</li></ul></li></ul><hr><h2 id="运维知识"><a href="#运维知识" class="headerlink" title="运维知识"></a>运维知识</h2><ul><li>Web服务器<ul><li>Nginx</li><li>Tomcat</li></ul></li><li>CDN加速</li><li>持续集成与持续部署 Jekins</li><li>代码质量检查 SonarQube</li><li>日志收集与分析 ELK</li></ul><hr><h2 id="关注源码与性能"><a href="#关注源码与性能" class="headerlink" title="关注源码与性能"></a>关注源码与性能</h2><ul><li>JDK源码与设计思想</li><li>Spring源码及设计</li><li>JVM细节及拍错</li><li>高并发以及高可用</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 学习路线 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo文档的一些注意点</title>
      <link href="2021/04/26/hexo-jie-shao/"/>
      <url>2021/04/26/hexo-jie-shao/</url>
      
        <content type="html"><![CDATA[<h2 id="1、参考资料"><a href="#1、参考资料" class="headerlink" title="1、参考资料"></a>1、参考资料</h2><ul><li><a href="https://blinkfox.github.io/2018/09/28/qian-duan/hexo-bo-ke-zhu-ti-zhi-hexo-theme-matery-de-jie-shao">Hexo博客主题之hexo-theme-matery的介绍</a></li><li><a href="https://mumaxu.github.io/2018/12/09/GitHub-Hexo-%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/">GitHub + Hexo 从零开始搭建个人博客</a></li></ul><h2 id="2、Hexo的常用命令"><a href="#2、Hexo的常用命令" class="headerlink" title="2、Hexo的常用命令"></a>2、Hexo的常用命令</h2><ul><li><code>hexo clean:清除</code></li><li><code>hexo g:编译</code></li><li><code>hexo s:本地部署</code></li><li><code>hexo d:在git hub上部署</code></li><li><code>hexo new post &quot;article title&quot;:新建文件</code></li></ul><h2 id="3、本地文件夹中的一些配置"><a href="#3、本地文件夹中的一些配置" class="headerlink" title="3、本地文件夹中的一些配置"></a>3、本地文件夹中的一些配置</h2><pre class=" language-xml"><code class="language-xml">scource/data/friends.json:中配置一些链接scource/_post:中进行博客的开编写</code></pre><h2 id="4、Font-matter选项详解"><a href="#4、Font-matter选项详解" class="headerlink" title="4、Font-matter选项详解"></a>4、Font-matter选项详解</h2><p>在每篇博文的头部可以对博文的一些信息进行设置，需要设置的如下：</p><pre class=" language-xml"><code class="language-xml">title: date:author:img:top:  //推荐文章（文章是否置顶），如果top值为true,则会作为首页推荐文章cover: //表示该文章是否需要加入到首页轮播封面中coverImg: //表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片summary://文章摘要，自定义文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章部分内同categories: //文章分类，本主题的分类表示宏观上的大类，只建议一篇文章一个分类tags: //文章标签，一篇文章可以多个标签</code></pre><h2 id="5、图床"><a href="#5、图床" class="headerlink" title="5、图床"></a>5、图床</h2><p>为了显示图片，一般使用图床：</p><p>可以选用：<a href="https://sm.ms/">图床</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo的配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题总结大纲</title>
      <link href="2021/04/26/leetcode-shua-ti-zong-jie-da-gang/"/>
      <url>2021/04/26/leetcode-shua-ti-zong-jie-da-gang/</url>
      
        <content type="html"><![CDATA[<p><img src="https://i.loli.net/2021/04/26/sUWSGRTjB6YVw9I.jpg" alt="胡丹丹.jpg"></p><blockquote><p>为了应对<code>面试</code>以及<code>锻炼代码基本功</code> 开个刷题专栏，以<a href="https://leetcode-cn.com/problemset/all/">LeetCode</a>题库进行训练</p><p>之前，笔者也练习过算法题，简单回顾下,2020年1月份看尚硅谷的一套视频，但是当时只看视频没有进行训练，后来20年3月份为了找实习进行了刷LeetCode，刷到5月份找到了实习也就断了。在<code>携程</code>实习期间，没事干，在7、8月份也刷了一些。但是，当时刷题也没有进行大规模的总结，所以在9.10月份的秋招笔试中吃了大亏，😔~！</p><p>在2021年3月也进行了短暂的训练，哎!~</p><p>开了这个帖子，坚持进行刷题吧！</p><p>在第一阶段的刷题中，笔记整理在CSDN上了：<a href="https://blog.csdn.net/ZHOUJIAN_TANK/article/details/105188065">在CSDN上整理的刷题笔记</a></p><p>在第二阶段的刷题中，笔记整理在WORD上：<a href="/download/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95.docx">个人整理数据结构与算法</a></p></blockquote><p>2021/4/6号统计的刷题情况：</p><p><img src="https://i.loli.net/2021/04/26/hFfE6UxX7WRzsL9.png" alt="LeetCode刷题进度"></p><hr><hr>]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
